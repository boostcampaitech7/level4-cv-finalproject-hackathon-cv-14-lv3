{
  "name": "auto_order_agent",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -780,
        -120
      ],
      "id": "a223a2ea-2416-4060-b5b2-3e27dab2c2a7",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        200,
        -120
      ],
      "id": "ef599886-4671-465e-8ac4-49b9ada33cb0",
      "name": "Merge"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "=solar-pro",
          "mode": "id"
        },
        "messages": {
          "values": [
            {
              "content": "당신은 주어진 문장을 확인하고 이를 보고서 형태로 변환하는 비서입니다. 주어진 Item_code와 Successfully인지 Fail인지 확인하여 사용자에게 해당 물품을 정상적으로 구매했는지를 보고서 형식으로 한글로 작성하십시오.\n\n예시 형식은 아래와 같습니다:\n주간 물품 구매 결과 보고서\n\nItem: Potato Chips\nItem_code: B07Z4G8253\nQuantity: 100\nStatus: Success\n\nItem: Shampoo\nItem_code: B07FLKB8CV\nQuantity: 30\nStatus: Fail(error: Attempt count exceeded)\n\n총 2개의 물품 주문을 시도하였으며 그 중 1개가 주문 시도 횟수 초과로 인해 실패하였습니다. 자세한 사항은 log파일을 확인해주시거나 메일을 통해 연락해주십시오.",
              "role": "system"
            },
            {
              "content": "={{ $json.chatInput }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        540,
        -120
      ],
      "id": "fa0bda55-8f9d-4373-9ede-ee73652d11b8",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "fJonTdRHICWpXJAh",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "taehan5479@gmail.com",
        "subject": "주간 물품 구매 결과 보고서",
        "emailType": "text",
        "message": "={{ $json.message.content }}",
        "options": {
          "senderName": "GORANI"
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        700,
        -120
      ],
      "id": "e30f8597-b304-492e-887a-05a3649327bf",
      "name": "Gmail",
      "webhookId": "7de19796-0312-439b-8b6f-2c5bb2c385ee",
      "credentials": {
        "gmailOAuth2": {
          "id": "ged36ZWz56iSUfsj",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cab773d2-04d6-4870-8874-100f0ea1fb3c",
              "name": "item_list",
              "value": "={{ $json.sub3 }}",
              "type": "string"
            },
            {
              "id": "187f4db0-9e41-48dc-b7dc-fbeb4c9c425a",
              "name": "quantity",
              "value": "={{ $json.quantity }}",
              "type": "string"
            },
            {
              "id": "15365237-7ee9-47ef-a4ba-84d8679d13c1",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -420,
        -120
      ],
      "id": "be2c0893-7bad-40e5-b641-d57271993314",
      "name": "order_list"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "order_product",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -600,
        -120
      ],
      "id": "4096ccd0-8383-49a8-b50d-a69bf600ba7b",
      "name": "Supabase1",
      "credentials": {
        "supabaseApi": {
          "id": "Pt6nV2B9ZR7Nq7KD",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "order_product",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -180,
        160
      ],
      "id": "1002ad6c-4077-4801-bba0-ca70a44413d3",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "Pt6nV2B9ZR7Nq7KD",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "product_inventory",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.id }}"
            }
          ]
        },
        "dataToSend": "autoMapInputData"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        540,
        180
      ],
      "id": "95a506a6-15ce-4812-a3c5-37605d1933c4",
      "name": "Supabase2",
      "credentials": {
        "supabaseApi": {
          "id": "Pt6nV2B9ZR7Nq7KD",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "product_inventory",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -20,
        240
      ],
      "id": "81f0da04-96b7-457d-a33c-d57fe6fca31f",
      "name": "Supabase3",
      "credentials": {
        "supabaseApi": {
          "id": "Pt6nV2B9ZR7Nq7KD",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor item in _input.all():\n  item.json.value = item.json.quantity\n  del item.json.main\n  del item.json.sub1\n  del item.json.sub2\n  del item.json.sub3\n  del item.json.quantity\nreturn _input.all()"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        340,
        180
      ],
      "id": "6910521b-f8a2-4f65-bcfb-4ca08d22d171",
      "name": "Code3"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "=id",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        200,
        180
      ],
      "id": "28363713-6735-4e4c-a260-979a1663929d",
      "name": "Merge1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:8000/api/auto_orders",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"items\": [\n    {\n      \"id\": {{ $json.id }},\n      \"value\": {{ $json.value }},\n      \"is_orderable\": {{ $json.is_orderable }}\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        700,
        180
      ],
      "id": "ae390222-dd06-4744-ab21-8a9de104f7e7",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "content": "### 주문 목록 불러오기 \norder_product 테이블 정보 읽어오기",
        "height": 240,
        "width": 360,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -640,
        -200
      ],
      "typeVersion": 1,
      "id": "9f28e5b1-1b32-47e3-b819-e920cbb1fabd",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "### 주문 에이전트\nOrder_Agent를 활용해 자동화된 주문 실행",
        "height": 240,
        "width": 380,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -240,
        -300
      ],
      "typeVersion": 1,
      "id": "e9553bef-fe29-4b83-8a74-90364224d9ce",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:8888/purchase",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "item_list",
              "value": "={{ $json.item_list }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -20,
        -220
      ],
      "id": "ce1e9903-8a63-43b9-84d0-f95916ff95ff",
      "name": "Order-Agent"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# Loop over input items and add a new field called 'myNewField' to the JSON of each one\n\nimport json\nimport re\n\nquantities = []\nitems = []\nids = []\nfor item in _input.all():\n  quantities.append(item.json.quantity)\n  items.append(item.json.item_list)\n  ids.append(item.json.id)\n\nfor item in _input.all():\n  matches = re.findall(r'Buy (\\w+) (Successfully|Fail):? ?(.*)', item.json.output)\n  item_code = \", \".join([match[0] for match in matches])\n  status = \", \".join([\"Success\" if match[1] == \"Successfully\" else \"Fail\" for match in matches])\n  purchase_statements = []\n  for i, match in enumerate(matches):\n    _item_code, _status, error_message = match\n    quantity = quantities[i]\n    _item = items[i]\n    if _status.lower() == \"successfully\":\n      purchase_statements.append(f\"Successfully purchased {quantity} units of {_item}(item code : {_item_code})\")\n    else:\n      purchase_statements.append(f\"Failed to purchase {quantity} units of {_item}(error : {error_message.strip()})\")\n  chat_input = \", \".join(purchase_statements)\n  \n  item.json.item_code = item_code\n  item.json.item_status = status\n  item.json.chatInput = chat_input\n  del item.json.status\n  del item.json.message\nid = \", \".join(ids)\nitem.json.id = id\nreturn item"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        340,
        -120
      ],
      "id": "bf8aa5b6-b8df-4ee6-91d3-30978f095ca9",
      "name": "Log Parser"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "item_lists = []\n# Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor item in _input.all():\n  item_lists.append(item.json.item_list)\nitem.json.item_list = \",\".join(item_lists)\ndel(item.json.quantity)\nreturn item"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -180,
        -220
      ],
      "id": "0cee582d-46cc-4435-990d-1ef9abdd39bc",
      "name": "Formatter1"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "\n# Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor item in _input.all():\n  id_str = item.json.id\n  item_status_str = item.json.item_status\n  ids = id_str.split(', ')\n  item_status = item_status_str.split(', ')\n  \noutput = []\nfor i in range(len(ids)):\n  output.append({\n    \"id\": ids[i],\n    \"status\": item_status[i]\n  })\nreturn output"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -600,
        180
      ],
      "id": "4c8b25d6-40bd-4ee4-87b6-a15b22ddae73",
      "name": "Formatter2"
    },
    {
      "parameters": {
        "content": "### 메일 알림 발송\n관리자 이메일로 주문 정보 알림 발송",
        "height": 240,
        "width": 660
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        180,
        -200
      ],
      "typeVersion": 1,
      "id": "6c2d103a-6c77-4ddd-b4d3-72c77947276f",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a0ac10f9-34ce-408e-a7eb-05548b87f937",
              "leftValue": "={{ $json.status }}",
              "rightValue": "Success",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -420,
        180
      ],
      "id": "070ddbb5-dd47-4006-bb07-39e0a0d62888",
      "name": "Check Order"
    },
    {
      "parameters": {
        "content": "### 주문 정보를 DB 및 대시보드에 반영\norder_product, product_inventory 테이블 값 업데이트 및 대시보드에 주문 정보 전달",
        "height": 320,
        "width": 1480,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -640,
        80
      ],
      "typeVersion": 1,
      "id": "8d351932-5741-43aa-9ac0-c5792acb503d",
      "name": "Sticky Note3"
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Supabase1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Log Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "order_list": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          },
          {
            "node": "Formatter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase1": {
      "main": [
        [
          {
            "node": "order_list",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "Supabase3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase3": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Supabase2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase2": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Order-Agent": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Parser": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          },
          {
            "node": "Formatter2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatter1": {
      "main": [
        [
          {
            "node": "Order-Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatter2": {
      "main": [
        [
          {
            "node": "Check Order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Order": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "df34130a-8072-4f84-ab2a-dec541a406c1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "89ddddfba8d870bb904e2070b342d6e3bd595dc49e89131cde59469edd32e972"
  },
  "id": "NJqjKz5FPRuMn2qi",
  "tags": []
}